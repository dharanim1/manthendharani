package JUnit;

import org.junit.Test;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;

public class OrderService2 {

	private int stock=10;

	private double discount =0.10;

	public int getstock(){

		return stock;

	}

	public void setStock(int stock) {

		if(stock <0) {

			throw new IllegalArgumentException("Stock cannot be negative");

		}

		this.stock = stock;

	}

	public double getDiscout() {

		return discount;

	}

	public void setDiscount(double discount) {

	    if (discount < 0 || discount > 1) {

	        throw new IllegalArgumentException("Discount must be between 0 and 1");

	    }

	    this.discount = discount;

	}

	public double calPrice(double price, int quantity) {

		if (price<0) {

			throw new IllegalArgumentException("price cannot be negative");

		}

		if (quantity <0) {

			throw new IllegalArgumentException("quantity cannot be negative");

		}

		return price*quantity*(1-discount);

	}

	public boolean placeOrder(int quantity) {

	    if (quantity < 0) {

	        throw new IllegalArgumentException("Quantity cannot be negative.");

	    }

	    if (quantity > stock) {

	        throw new IllegalArgumentException("Insufficient stock");

	    }

	    stock -= quantity;

	    return true;

	}@BeforeAll
	public static void beforeAllTests() {
	    System.out.println("Before all tests");
	}
	@AfterAll
	public static void afterAllTests() {
	    System.out.println("After all tests");
	}
	@AfterEach
	public void afterEachTest() {
	    System.out.println("After each test");
	}
	 
	@Test
	@Disabled("Test disabled for demonstration purposes")
	public void testDisabled() {
	    System.out.println("This test is disabled and will not run");
	}
	    
	    


}
 