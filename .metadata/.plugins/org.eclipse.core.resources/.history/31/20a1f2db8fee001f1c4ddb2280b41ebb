package JUnit;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
class OrderService2Test {
    private OrderService2 orderService2;
    @BeforeEach
    void setup() {
        orderService2 = new OrderService2();
    }
    @Test
    public void testCalPrice_ValidInputs() {
        double price = 100.00;
        int quantity = 2;
        double expectedPrice = price * quantity * (1 - orderService2.getDiscout());
        assertEquals(expectedPrice, orderService2.calPrice(price, quantity));
    }
    @Test
    public void testPlaceOrderSuccess() {
        assertTrue(orderService2.placeOrder(5), "Order should be placed successfully");
        assertEquals(5, orderService2.getstock(), "Stock = 10 - 5");
    }
    @Test
    public void OrderZeroQuantity() {
        assertEquals(0, orderService2.calPrice(100, 0), "Total price should be 0 when quantity is zero");
    }

 
    @Test
    public void compareStock() {
        assertTrue(orderService2.placeOrder(10), "Stock matched quantity");
        assertEquals(0, orderService2.getstock(), "Stock = 10-10 (0)");
    }
    @Test
    public void JustBelowStock() {
        assertTrue(orderService2.placeOrder(9), "Order should be placed when just below stock limit");
        assertEquals(1, orderService2.getstock(), "Stock = 10 - 9");
    }
// Exceptional Cases
	// place order beyond stock
	// set stock -> -ve stock
	// set discount -> (0-1), 1.5 ->
	// negative price
	// negative quantity	
    @Test
    public void InsufficientStock() {
       int quantity = 12;
        assertThrows(IllegalArgumentException.class, () -> {
            orderService2.placeOrder(quantity);
        });
    }
    //negative stock
    @Test
    public void negativeStock() {
    	int stock = -1;
        assertThrows(IllegalArgumentException.class, () -> {
            orderService2.setStock(stock);
        });
    }
	// set discount -> (0-1), 1.5 ->
    @Test
    public void discountException() {
    	double discount = 1.5;
        assertThrows(IllegalArgumentException.class, () -> {
            orderService2.setDiscount(discount);
        });
    }
	// negative price
    @Test
    public void OrderNegativePrice() {
        double price = -100.00;
        int quantity = 2;
        assertThrows(IllegalArgumentException.class, () -> {
            orderService2.calPrice(price, quantity);
        });
    }
 
	// negative quantity
    @Test
    public void OrderNegativeQuantity() {
        int quantity = -1;
        assertThrows(IllegalArgumentException.class, () -> {
        	orderService2.placeOrder(quantity);
        });
    }

}